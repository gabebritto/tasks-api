<?php

namespace Tests\Integration\User;

use App\User\Infrastructure\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function test_user_list(): void
    {
        User::factory()->create(['email' => fake()->email()]);

        // Send GET request to retrieve all data
        $response = $this->actingAs($this->user)->getJson('/api/user', ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        $response->assertJsonCount(2, 'data'); // Acting user + factory created users
    }

    public function test_user_get_by_id(): void
    {
        $userId = $this->user->id;
        $response = $this->actingAs($this->user)->getJson("/api/user/$userId", ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data' => ['user' => ['name', 'email']],
        ]);
    }

    public function test_user_get_by_email(): void
    {
        // Send GET request to retrieve customer by email
        $response = $this->actingAs($this->user)->post('/api/user/email',
            [
                'email' => $this->user->email,
            ],
            [
                'Accept' => 'application/json',
            ]
        );

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data' => ['user' => ['name', 'email']],
        ]);
    }

    public function test_user_save(): void
    {
        $payload = [
            'name' => 'Name',
            'email' => 'user@example.com',
            'password' => 'password123',
        ];

        $response = $this->actingAs($this->user)->post('api/user', $payload, ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data',
        ]);
    }

    public function test_user_update(): void
    {
        $userToBeUpdated = User::factory()->create(['email' => fake()->email()]);

        $response = $this->actingAs($this->user)->put("api/user/$userToBeUpdated->id", ['name' => 'updated name', 'email' => 'updatedemail@email.com'], ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data',
        ]);
    }

    public function test_user_delete(): void
    {
        $userToBeDeleted = User::factory()->create(['email' => fake()->email()]);
        $response = $this->actingAs($this->user)->delete("api/user/$userToBeDeleted->id", ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data',
        ]);

        $this->assertDatabaseMissing('users', ['id' => $userToBeDeleted->id]);
    }
}
