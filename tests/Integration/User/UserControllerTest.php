<?php

namespace User;

use App\User\Infrastructure\Models\Customer;
use App\User\Infrastructure\Models\User;
use Database\Factories\CustomerFactory;
use Tests\TestCase;

class UserControllerTest extends TestCase
{
    protected User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function test_user_list(): void
    {
        User::factory(5)->create();

        // Send GET request to retrieve all data
        $response = $this->actingAs($this->user)->getJson('/api/user/list', ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        $response->assertJsonCount(6, 'data'); //Acting user + factory created users
    }

    public function test_user_get_by_id(): void
    {
        $user = User::factory()->create();

        // Send GET request to retrieve customer by email
        $response = $this->actingAs($this->user)->getJson("/api/user/get-id/$user->id", ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data' => ['user']
        ]);
    }

    public function test_user_get_by_email(): void
    {
        $user = User::factory()->create();

        // Send GET request to retrieve customer by email
        $response = $this->actingAs($this->user)->post("/api/user/get-email",
            [
                "email" => $user->email
            ],
            [
                'Accept' => 'application/json'
            ]
        );

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data' => ['user']
        ]);
    }

    public function test_user_save(): void
    {
        $payload = [
            'name' => "Name",
            'email' => "user@example.com",
            'password' => "password123"
        ];

        $response = $this->actingAs($this->user)->post("api/user/save", $payload, ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data'
        ]);
    }

    public function test_user_update(): void
    {
        $user = User::factory()->create();

        $payload = [
            ...$user->toArray(),
        ];

        $response = $this->actingAs($this->user)->put("api/user/$user->id", $payload, ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data'
        ]);
    }

    public function test_user_delete(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($this->user)->delete("api/user/$user->id", ['Accept' => 'application/json']);

        // Do the assertions
        $response->assertStatus(200);
        // Check if the response has expected data
        $response->assertJsonStructure([
            'status',
            'message',
            'data'
        ]);

        $this->assertDatabaseMissing('users', ['id' => $user->id]);
    }
}
